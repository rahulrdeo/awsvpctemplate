AWSTemplateFormatVersion: 2010-09-09
Description: 'Test VPC Template'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    -
      Label:
        default: "AWS Core Network Configuration"
      Parameters:
        - VpcName
        - VpcCidrOnAws
        - NoOfSubnet
        - Subnet1Name
        - Subnet1CidrOnAws
        - MySubnet1Az
        - Subnet2Name
        - Subnet2CidrOnAws
        - MySubnet2Az
        - Subnet3Name
        - Subnet3CidrOnAws
        - MySubnet3Az
        - Subnet4Name
        - Subnet4CidrOnAws
        - MySubnet4Az
        - PubSubnetName
        - PubSubnetCidrOnAws
        - MyPubSubnetAz
    ParameterLabels:
      VpcCidrOnAws:
        default: "VPC CIDR between /16 and /24"
      NoOfSubnet:
        default: "Number of private subnets"
      SubnetCidrBits:
        default: "IP CIDR Bits for Subnet (4 to 16 or <= CIDR of VPC)"
      MySubnet1Az:
        default: "Subnet 1 Availability Zone"
      MySubnet2Az:
        default: "Subnet 2 Availability Zone"
      MySubnet3Az:
        default: "Subnet 3 Availability Zone"
      MySubnet4Az:
        default: "Subnet 4 Availability Zone"
      MyPubSubnetAz:
        default: "Public Subnet Availability Zone"
Parameters:
  VpcCidrOnAws:
    Description: Enter CIDR for target VPC
    Type: String
    ConstraintDescription: Must be between /16 and /24 CIDR Block
    AllowedPattern: '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/([8-9]|1[0-9]|2[0-4])'
  NoOfSubnet:
    Description: 'Enter No. of private subnets for target'
    Type: String
    Default: 2
    AllowedValues: [1, 2, 4]
  #SubnetCidrBits:
   # Description: e.g.  16 bits for /16, 12 bit for /20, 8 bits for /24 CIDR
    #Type: Number
    #MinValue: 8
    #MaxValue: 16
    #ConstraintDescription: Must be between /16 and /24 CIDR Block
    #AllowedPattern: '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/([8-9]|1[0-9]|2[0-4])'
  Subnet1CidrOnAws:
    Description: Enter CIDR for subnet 1
    Type: String
    ConstraintDescription: Must be between /16 and /24 CIDR Block
  Subnet2CidrOnAws:
    Description: Enter CIDR for subnet 2 (Keep it blank if NoOfSubnet < 2)
    Type: String
    ConstraintDescription: Must be between /16 and /24 CIDR Block
  Subnet3CidrOnAws:
    Description: Enter CIDR for subnet 3 (Keep it blank if NoOfSubnet < 4)
    Type: String
    ConstraintDescription: Must be between /16 and /24 CIDR Block
  Subnet4CidrOnAws:
    Description: Enter CIDR for subnet 4 (Keep it blank if NoOfSubnet < 4)
    Type: String
    ConstraintDescription: Must be between /16 and /24 CIDR Block
  PubSubnetCidrOnAws:
    Description: Enter CIDR for Public Subnet
    Type: String
    ConstraintDescription: Must be between /16 and /24 CIDR Block
  
  VpcName:
    Description: Name tag for VPC
    Type: String
  Subnet1Name:
    Description: Name tag for Subnet1
    Type: String
    
  Subnet2Name:
    Description: Name tag for Subnet2
    Type: String
  
  Subnet3Name:
    Description: Name tag for Subnet3
    Type: String
  
  Subnet4Name:
    Description: Name tag for Subnet4
    Type: String
  
  PubSubnetName:
    Description: Name tag for Public Subnet
    Type: String
  
  
  MySubnet1Az:
    Description: Subnet Availability Zone
    Type: AWS::EC2::AvailabilityZone::Name 
  MySubnet2Az:
    Description: Subnet Availability Zone
    Type: AWS::EC2::AvailabilityZone::Name
  MySubnet3Az:
    Description: Subnet Availability Zone
    Type: AWS::EC2::AvailabilityZone::Name
  MySubnet4Az:
    Description: Subnet Availability Zone
    Type: AWS::EC2::AvailabilityZone::Name
  MyPubSubnetAz:
    Description: Public Subnet Availability Zone (Default Creation)
    Type: AWS::EC2::AvailabilityZone::Name
Conditions:
  CreateOneSubnet: !Or [!Equals [!Ref NoOfSubnet, 1], !Equals [!Ref NoOfSubnet, 2], !Equals [!Ref NoOfSubnet, 4]]
  CreateTwoSubnet: !Or [!Equals [!Ref NoOfSubnet, 2], !Equals [!Ref NoOfSubnet, 4]]
  CreateFourSubnet: !Equals [!Ref NoOfSubnet, 4]
    
Resources:
  MyVpcAws:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrOnAws
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: 'Name'
        Value: !Ref VpcName
  MySubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateOneSubnet
    Properties:
      AvailabilityZone: !Ref MySubnet1Az
      CidrBlock: !Ref Subnet1CidrOnAws
      VpcId: !Ref MyVpcAws
      Tags:
      - Key: "Name"
        Value: !Ref Subnet1Name
  MySubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreateTwoSubnet
    Properties:
      AvailabilityZone: !Ref MySubnet2Az
      CidrBlock: !Ref Subnet2CidrOnAws
      VpcId: !Ref MyVpcAws
      Tags:
      - Key: "Name"
        Value: !Ref Subnet2Name  
  MySubnet3:
    Type: AWS::EC2::Subnet
    Condition: CreateFourSubnet
    Properties:
      AvailabilityZone: !Ref MySubnet3Az
      CidrBlock: !Ref Subnet3CidrOnAws
      VpcId: !Ref MyVpcAws
      Tags:
      - Key: "Name"
        Value: !Ref Subnet3Name
  MySubnet4:
    Type: AWS::EC2::Subnet
    Condition: CreateFourSubnet
    Properties:
      AvailabilityZone: !Ref MySubnet4Az
      CidrBlock: !Ref Subnet4CidrOnAws
      VpcId: !Ref MyVpcAws
      Tags:
      - Key: "Name"
        Value: !Ref Subnet4Name
  MyPubSubnet:
    Type: AWS::EC2::Subnet
    Condition: CreateOneSubnet
    Properties:
      AvailabilityZone: !Ref MyPubSubnetAz
      CidrBlock: !Ref PubSubnetCidrOnAws
      VpcId: !Ref MyVpcAws
      MapPublicIpOnLaunch: true
      Tags:
      - Key: "Name"
        Value: !Ref PubSubnetName 
  MyAwsIgw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: "Name"
        Value: "AWS-IGW"
  MyAwsIgwAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyAwsIgw
      VpcId: !Ref MyVpcAws
  MyAwsPubRtTab:
    Type: AWS::EC2::RouteTable 
    Properties:
      VpcId: !Ref MyVpcAws
      Tags:
      - Key: "Name"
        Value: "AWS Public Route Table"
  MyAwsRt:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref MyAwsIgw
      RouteTableId: !Ref MyAwsPubRtTab
  MyAwsRtPubSubnet:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyAwsPubRtTab
      SubnetId: !Ref MyPubSubnet
  MyAwsRtTab:
    Type: AWS::EC2::RouteTable 
    Properties:
      VpcId: !Ref MyVpcAws
      Tags:
      - Key: "Name"
        Value: "AWS Private Route Table"
  MyAwsRtSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateOneSubnet
    Properties:
      RouteTableId: !Ref MyAwsRtTab
      SubnetId: !Ref MySubnet1
  MyAwsRtSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateTwoSubnet
    Properties:
      RouteTableId: !Ref MyAwsRtTab
      SubnetId: !Ref MySubnet2
  MyAwsRtSubnet3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateFourSubnet
    Properties:
      RouteTableId: !Ref MyAwsRtTab
      SubnetId: !Ref MySubnet3
  MyAwsRtSubnet4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateFourSubnet
    Properties:
      RouteTableId: !Ref MyAwsRtTab
      SubnetId: !Ref MySubnet4

  

    